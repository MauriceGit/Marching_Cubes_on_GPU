#version 430 core

#define WORK_GROUP_SIZE_X 10
#define WORK_GROUP_SIZE_Y 10
#define WORK_GROUP_SIZE_Z 10

struct Vertex {
    vec4 pos;
    vec4 normal;
};
struct Triangle {
    Vertex vertices[3];
};

layout (local_size_x = WORK_GROUP_SIZE_X, local_size_y = WORK_GROUP_SIZE_Y, local_size_z = WORK_GROUP_SIZE_Z) in;

// A case is the density definition of one cube. Bitwise added number.
// triangleCount returns the number of triangles to be generated for a given case.
layout (std430, binding = 0) buffer caseToNumPolys
{
    int triangleCount[256];
};
// edgeConnectList gets the same case as input as caseToNumPolys and as second parameter to the access function)
// the triangle index. If caseToNumPolys is 3, edgeConnectList has triangle index 0..2 defined.
layout (std430, binding = 1) buffer edgeConnectList
{
    int edgeList[256*5*3];
};

// List of triangle positions and normals
// Gets filled in the second run of this shader
layout (std430, binding = 2) buffer positionList
{
    Triangle triangles[];
};

// Gets filled in the first run of this shader
layout (std430, binding = 3) buffer triangleLayoutSizes
{
    int layoutSize[];
};
// Gets filled in the first run of this shader
layout (std430, binding = 4) buffer marchingCubeCases
{
    int cases[];
};

// Fills the triangleLayoutSizes buffer so we know, how much memory we need next time.
uniform bool calculateSizeOnly;

// The offset between the dispatched units because they all operate on the same buffer.
// First-Run uniforms
uniform int cubeIndexOffset;
uniform vec3 cubePositionOffset;




// Because of internal memory layout issues (especially with std140),
// I just use it tightly packed and unpack it myself...
// Ideally, this will be optimized, once marching cubes actually works!
ivec3 edgeListAt(int index, int triangle) {
    ivec3 res;
    res[0] = edgeList[15*index+3*triangle];
    res[1] = edgeList[15*index+3*triangle+1];
    res[2] = edgeList[15*index+3*triangle+2];
    return res;
}

// Each v can ONLY be 0 or 1 !!!
int caseNumberFromVertices(int v7, int v6, int v5, int v4, int v3, int v2, int v1, int v0) {
    return v7*128 + v6*64 + v5*32 + v4*16 + v3*8 + v2*4 + v1*2 + v0*1;
}


float densityUnion(float d1, float d2) {
    float b = 0.4;
    return -exp(-b*d1) - exp(-b*d2) + 1.;
}

// Feel free to insert any implicit function you like!
float getDensityAtPosition(vec3 pos) {

    float x = pos.x;
    float y = pos.y;
    float z = pos.z;


    float floor = y - 5;
    // Flat floor at y == 0

    float dx = sin(y) + sin(z) + 1.5;
    float dy = sin(x) + sin(z) + 3.5;
    float dz = sin(x) + sin(y) + 8.5;

    vec3 d = pos - vec3(dx, dy, dz);
    float surface = min(d.x, min(d.y, d.z));

    float gyroid = cos(x) * sin(y) + cos(y) * sin(z) + cos(z) * sin(x);
    //return gyroid;

    // Move everything to the center!
    x -= 5.;
    y -= 5.;
    z -= 5.;
    float cylinderR = 2.0;
    float sphereR   = 4.5;
    float cubeR     = 3.0;

    // http://gfs.sourceforge.net/wiki/index.php/GfsSurface
    float sphere = x*x + y*y + z*z - sphereR*sphereR;
    float cube = max(abs(x), max(abs(y), abs(z))) - cubeR;
    float cylinder1 = x*x + y*y - cylinderR*cylinderR;
    float cylinder2 = z*z + y*y - cylinderR*cylinderR;
    float cylinder3 = x*x + z*z - cylinderR*cylinderR;
    float cylinderU = min(cylinder1, min(cylinder2, cylinder3));
    float sIc = max(sphere, cube);
    //return max(sIc, -cylinderU);

    return cylinderU;
    return floor;


    //return min(floor, sphere);

    //return densityUnion(floor, gyroid);

    //return min(surface, floor);


}

// Returns 1 if there is solid matter at pos and 0, if there is not!
int isSolidMatter(vec3 pos) {
    return getDensityAtPosition(pos) <= 0 ? 1 : 0;
}

int createCase(vec3 index) {

    int v0 = isSolidMatter(index);
    int v1 = isSolidMatter(index + vec3(0,1,0));
    int v2 = isSolidMatter(index + vec3(1,1,0));
    int v3 = isSolidMatter(index + vec3(1,0,0));
    int v4 = isSolidMatter(index + vec3(0,0,1));
    int v5 = isSolidMatter(index + vec3(0,1,1));
    int v6 = isSolidMatter(index + vec3(1,1,1));
    int v7 = isSolidMatter(index + vec3(1,0,1));

    return caseNumberFromVertices(v7,v6,v5,v4,v3,v2,v1,v0);
}

// Linear interpolation between the densities at p1 and p2.
// 0 is expected to represent the actual surface. Negative values
// are solid matter, positive are no matter.
//
// For a fancy, more minecrafty-look, just return 0.5. It will still look
// close to what you expect, but more blocky :)
float densityInterpolation(vec3 p, vec3 p1, vec3 p2) {
    float densityAtP1 = getDensityAtPosition(p+p1);
    float densityAtP2 = getDensityAtPosition(p+p2);

    //return 0.5;
    return -densityAtP1 / (densityAtP2 - densityAtP1);
}

vec3 getIntersectionFromEdge(int edgeIndex, vec3 p) {
    float f = 0.5;
    switch (edgeIndex) {
        // X Interplation
        case 1:
            f = densityInterpolation(p, vec3(0,1,0), vec3(1,1,0));
            return vec3(f,1,0);
        case 3:
            f = densityInterpolation(p, vec3(0,0,0), vec3(1,0,0));
            return vec3(f,0,0);
        case 5:
            f = densityInterpolation(p, vec3(0,1,1), vec3(1,1,1));
            return vec3(f,1,1);
        case 7:
            f = densityInterpolation(p, vec3(0,0,1), vec3(1,0,1));
            return vec3(f,0,1);
        // Y Interpolation
        case 0:
            f = densityInterpolation(p, vec3(0,0,0), vec3(0,1,0));
            return vec3(0,f,0);
        case 2:
            f = densityInterpolation(p, vec3(1,0,0), vec3(1,1,0));
            return vec3(1,f,0);
        case 4:
            f = densityInterpolation(p, vec3(0,0,1), vec3(0,1,1));
            return vec3(0,f,1);
        case 6:
            f = densityInterpolation(p, vec3(1,0,1), vec3(1,1,1));
            return vec3(1,f,1);
        // Z Interpolation
        case 8:
            f = densityInterpolation(p, vec3(0,0,0), vec3(0,0,1));
            return vec3(0,0,f);
        case 9:
            f = densityInterpolation(p, vec3(0,1,0), vec3(0,1,1));
            return vec3(0,1,f);
        case 10:
            f = densityInterpolation(p, vec3(1,1,0), vec3(1,1,1));
            return vec3(1,1,f);
        case 11:
            f = densityInterpolation(p, vec3(1,0,0), vec3(1,0,1));
            return vec3(1,0,f);
    }
    // Should never get here!
    return vec3(-10, -10, -10);
}

// Normal calculation using partial derivatives of close density values.
vec3 calcNormalAt(vec3 pos) {

    float d = 1.0/float(max(WORK_GROUP_SIZE_X, max(WORK_GROUP_SIZE_Y, WORK_GROUP_SIZE_Z)))/10.;
    vec3 normal;

    normal.x = getDensityAtPosition(pos + vec3(d,0,0)) - getDensityAtPosition(pos + vec3(-d,0,0));
    normal.y = getDensityAtPosition(pos + vec3(0,d,0)) - getDensityAtPosition(pos + vec3(0,-d,0));
    normal.z = getDensityAtPosition(pos + vec3(0,0,d)) - getDensityAtPosition(pos + vec3(0,0,-d));

    return normalize(normal);
}

void createTrianglesForCase(uvec3 index) {

    uint linearIndex = WORK_GROUP_SIZE_X*WORK_GROUP_SIZE_Y*index.z + WORK_GROUP_SIZE_X*index.y + index.x + cubeIndexOffset;
    int cubeCase = cases[linearIndex];
    int caseTriangleCount = triangleCount[cubeCase];

    int layoutPos = layoutSize[linearIndex];

    for (int i = 0; i < caseTriangleCount; i++) {
        ivec3 edgeIntersections = edgeListAt(cubeCase, i);

        vec3 cubePos = vec3(index) + cubePositionOffset;

        vec3 v0 = getIntersectionFromEdge(edgeIntersections[0], cubePos) + cubePos;
        vec3 v1 = getIntersectionFromEdge(edgeIntersections[1], cubePos) + cubePos;
        vec3 v2 = getIntersectionFromEdge(edgeIntersections[2], cubePos) + cubePos;

        triangles[layoutPos + i].vertices[0].pos = vec4(v0,0);
        triangles[layoutPos + i].vertices[1].pos = vec4(v1,0);
        triangles[layoutPos + i].vertices[2].pos = vec4(v2,0);

        // Low quality normals, producing equal normal for all three vertices of a triangle.
        //triangles[layoutPos + i].vertices[0].normal = vec4(cross(v1-v0, v2-v0), 0);
        //triangles[layoutPos + i].vertices[1].normal = vec4(cross(v2-v1, v0-v1), 0);
        //triangles[layoutPos + i].vertices[2].normal = vec4(cross(v0-v2, v1-v2), 0);

        // High quality normals using partial derivatives of density
        triangles[layoutPos + i].vertices[0].normal = vec4(calcNormalAt(v0), 0);
        triangles[layoutPos + i].vertices[1].normal = vec4(calcNormalAt(v1), 0);
        triangles[layoutPos + i].vertices[2].normal = vec4(calcNormalAt(v2), 0);

    }
}

// This will be called in the first shader run.
// Here, only the potential triangles are counted and written into a buffer.
// This way, we can fill the position buffer without having empty spaces in between.
// The actual cases are also cached and reused in the second run.
void calculateMemorySizes(uvec3 index) {
    int cubeCase = createCase(vec3(index) + cubePositionOffset);
    uint i = WORK_GROUP_SIZE_X*WORK_GROUP_SIZE_Y*index.z + WORK_GROUP_SIZE_X*index.y + index.x + cubeIndexOffset;
    cases[i] = cubeCase;
    layoutSize[i] = triangleCount[cubeCase];
}

void main(void)
{
    uvec3 index = gl_GlobalInvocationID.xyz;

    if (calculateSizeOnly) {
        // First shader invocation
        calculateMemorySizes(index);
    } else {
        // Second shader invocation, using precalculated data from the first run.
        createTrianglesForCase(index);
    }

}
